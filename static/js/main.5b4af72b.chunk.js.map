{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["business","Business","className","src","alt","React","Component","BusinessList","sortByOptions","SearchBar","Object","keys","map","sortByOption","sortByOptionValue","key","this","renderSortByOptions","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAGMA,G,kBACM,iFADNA,EAEE,sBAFFA,EAGK,sBAHLA,EAIE,aAJFA,EAKG,KALHA,EAMK,QANLA,EAOM,UAPNA,EAQI,IARJA,EASS,GA4BAC,E,iLAvBb,OACC,yBAAKC,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKC,IAAKH,EAAmBI,IAAI,MAEnC,4BAAKJ,GACL,yBAAKE,UAAU,wBACb,yBAAKA,UAAU,oBACb,2BAAIF,GACJ,2BAAIA,GACJ,2BAAIA,EAAJ,IAAqBA,IAEvB,yBAAKE,UAAU,oBACb,4BAAKF,GACL,wBAAIE,UAAU,UAAUF,EAAxB,UACA,2BAAIA,EAAJ,mB,GAjBcK,IAAMC,WCIdC,E,iLAbb,OACC,yBAAKL,UAAU,gBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATuBG,IAAMC,WCD3BE,G,MAAgB,CACpB,aAAc,aACd,gBAAiB,SACjB,gBAAiB,iBA+BJC,E,8LA1Bb,OAAOC,OAAOC,KAAKH,GAAeI,KAAI,SAAAC,GACrC,IAAIC,EAAoBN,EAAcK,GACtC,OAAO,wBAAIE,IAAKD,GAAoBD,Q,+BAKrC,OACC,yBAAKX,UAAU,aACb,yBAAKA,UAAU,0BACb,4BACEc,KAAKC,wBAGT,yBAAKf,UAAU,oBACb,2BAAOgB,YAAY,sBACnB,2BAAOA,YAAY,YAErB,yBAAKhB,UAAU,oBACb,6C,GArBiBG,IAAMC,WCQfa,E,iLAVX,OACA,yBAAKjB,UAAU,OACb,wCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANYG,IAAMC,WCOJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b4af72b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nconst business = {\r\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\r\n  name: 'MarginOtto Pizzeria',\r\n  address: '1010 Paddington Way',\r\n  city: 'Flavortown',\r\n  state: 'NY',\r\n  zipCode: '10101',\r\n  category: 'Italian',\r\n  rating: 4.5,\r\n  reviewCount: 90\r\n};\r\n\r\nclass Business extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Business\">\r\n\t\t\t  <div className=\"image-container\">\r\n\t\t\t    <img src={business.imageSrc} alt=''/>\r\n\t\t\t  </div>\r\n\t\t\t  <h2>{business.name}</h2>\r\n\t\t\t  <div className=\"Business-information\">\r\n\t\t\t    <div className=\"Business-address\">\r\n\t\t\t      <p>{business.address}</p>\r\n\t\t\t      <p>{business.city}</p>\r\n\t\t\t      <p>{business.state} {business.zipCode}</p>\r\n\t\t\t    </div>\r\n\t\t\t    <div className=\"Business-reviews\">\r\n\t\t\t      <h3>{business.category}</h3>\r\n\t\t\t      <h3 className=\"Rating\">{business.rating} stars</h3>\r\n\t\t\t      <p>{business.reviewCount} reviews</p>\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"BusinessList\">\r\n\t\t\t\t<Business /> \r\n\t\t\t\t<Business /> \r\n\t\t\t\t<Business /> \r\n\t\t\t\t<Business /> \r\n\t\t\t\t<Business /> \r\n\t\t\t\t<Business /> \r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst sortByOptions = {\r\n  'Best Match': 'best_match',\r\n  'Highest Rated': 'rating',\r\n  'Most Reviewed': 'review_count'\r\n}\r\n\r\nclass SearchBar extends React.Component {\r\n\trenderSortByOptions() {\r\n\t\treturn Object.keys(sortByOptions).map(sortByOption => {\r\n\t\t\tlet sortByOptionValue = sortByOptions[sortByOption];\r\n\t\t\treturn <li key={sortByOptionValue}>{sortByOption}</li>;\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchBar\">\r\n\t\t\t  <div className=\"SearchBar-sort-options\">\r\n\t\t\t    <ul>\r\n\t\t\t    \t{this.renderSortByOptions()}\r\n\t\t\t    </ul>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"SearchBar-fields\">\r\n\t\t\t    <input placeholder=\"Search Businesses\" />\r\n\t\t\t    <input placeholder=\"Where?\" />\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"SearchBar-submit\">\r\n\t\t\t    <a>Let's Go</a>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <h1>ravenous</h1>\r\n      <SearchBar />\r\n      <BusinessList />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}